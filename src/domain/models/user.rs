//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u64,
	#[sea_orm(unique)]
	pub username: String,
	pub password: String,
	#[sea_orm(unique)]
	pub email: String,
	pub role: u8,
	pub bio: String,
	pub avatar: String,
	pub is_valid: u8,
	pub create_time: TimeDateTime,
	pub update_time: TimeDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::article::Entity")]
	Article,
	#[sea_orm(has_many = "super::article_favorite::Entity")]
	ArticleFavorite,
	#[sea_orm(has_many = "super::comment::Entity")]
	Comment,
	#[sea_orm(has_many = "super::comment_favorite::Entity")]
	CommentFavorite,
	#[sea_orm(has_many = "super::email::Entity")]
	Email,
}

impl Related<super::article::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Article.def()
	}
}

impl Related<super::article_favorite::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ArticleFavorite.def()
	}
}

impl Related<super::comment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Comment.def()
	}
}

impl Related<super::comment_favorite::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CommentFavorite.def()
	}
}

impl Related<super::email::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Email.def()
	}
}

impl Related<super::category::Entity> for Entity {
	fn to() -> RelationDef {
		super::user_category::Relation::Category.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::user_category::Relation::User.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}
