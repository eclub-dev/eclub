//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_category")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub user_id: u64,
	#[sea_orm(primary_key, auto_increment = false)]
	pub category_id: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::category::Entity",
		from = "Column::CategoryId",
		to = "super::category::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Category,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::UserId",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
}

impl Related<super::category::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Category.def()
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
