//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "comment")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u64,
	#[sea_orm(column_type = "Text")]
	pub content: String,
	pub content_type: u8,
	pub article_id: u64,
	pub user_id: u64,
	pub create_time: TimeDateTime,
	pub update_time: TimeDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::article::Entity",
		from = "Column::ArticleId",
		to = "super::article::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Article,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::UserId",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
	#[sea_orm(has_many = "super::comment_favorite::Entity")]
	CommentFavorite,
}

impl Related<super::article::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Article.def()
	}
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl Related<super::comment_favorite::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::CommentFavorite.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
