//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "article")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u64,
	pub ulid: String,
	pub user_id: u64,
	pub title: String,
	pub head_img: String,
	#[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
	pub content: String,
	pub content_type: u8,
	pub views: i64,
	pub likes: i64,
	pub audit_content: Option<String>,
	pub is_audit: u8,
	pub is_pin: u8,
	pub is_official: u8,
	pub is_delete: u8,
	pub create_time: TimeDateTime,
	pub update_time: TimeDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::UserId",
		to = "super::user::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	User,
	#[sea_orm(has_many = "super::article_favorite::Entity")]
	ArticleFavorite,
	#[sea_orm(has_many = "super::comment::Entity")]
	Comment,
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl Related<super::article_favorite::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ArticleFavorite.def()
	}
}

impl Related<super::comment::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Comment.def()
	}
}

impl Related<super::tag::Entity> for Entity {
	fn to() -> RelationDef {
		super::article_tag::Relation::Tag.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::article_tag::Relation::Article.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}
