//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "tag")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u64,
	#[sea_orm(unique)]
	pub name: String,
	pub create_time: TimeDateTime,
	pub update_time: TimeDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::article::Entity> for Entity {
	fn to() -> RelationDef {
		super::article_tag::Relation::Article.def()
	}
	fn via() -> Option<RelationDef> {
		Some(super::article_tag::Relation::Tag.def().rev())
	}
}

impl ActiveModelBehavior for ActiveModel {}
